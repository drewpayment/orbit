// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: temporal.proto

package temporalv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WorkflowService_StartRepositoryGeneration_FullMethodName = "/idp.temporal.v1.WorkflowService/StartRepositoryGeneration"
	WorkflowService_StartCodeGeneration_FullMethodName       = "/idp.temporal.v1.WorkflowService/StartCodeGeneration"
	WorkflowService_StartKnowledgeSync_FullMethodName        = "/idp.temporal.v1.WorkflowService/StartKnowledgeSync"
	WorkflowService_GetWorkflowStatus_FullMethodName         = "/idp.temporal.v1.WorkflowService/GetWorkflowStatus"
	WorkflowService_CancelWorkflow_FullMethodName            = "/idp.temporal.v1.WorkflowService/CancelWorkflow"
	WorkflowService_ListWorkflows_FullMethodName             = "/idp.temporal.v1.WorkflowService/ListWorkflows"
)

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Workflow Management Service
type WorkflowServiceClient interface {
	// Start repository generation workflow
	StartRepositoryGeneration(ctx context.Context, in *RepositoryGenerationWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	// Start code generation workflow
	StartCodeGeneration(ctx context.Context, in *CodeGenerationWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	// Start knowledge synchronization workflow
	StartKnowledgeSync(ctx context.Context, in *KnowledgeSyncWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error)
	// Get workflow status
	GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error)
	// Cancel workflow
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error)
	// List workflows for workspace
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) StartRepositoryGeneration(ctx context.Context, in *RepositoryGenerationWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartRepositoryGeneration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartCodeGeneration(ctx context.Context, in *CodeGenerationWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartCodeGeneration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) StartKnowledgeSync(ctx context.Context, in *KnowledgeSyncWorkflowRequest, opts ...grpc.CallOption) (*WorkflowExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, WorkflowService_StartKnowledgeSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) GetWorkflowStatus(ctx context.Context, in *GetWorkflowStatusRequest, opts ...grpc.CallOption) (*GetWorkflowStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkflowStatusResponse)
	err := c.cc.Invoke(ctx, WorkflowService_GetWorkflowStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*CancelWorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWorkflowResponse)
	err := c.cc.Invoke(ctx, WorkflowService_CancelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*ListWorkflowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkflowsResponse)
	err := c.cc.Invoke(ctx, WorkflowService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations must embed UnimplementedWorkflowServiceServer
// for forward compatibility
//
// Workflow Management Service
type WorkflowServiceServer interface {
	// Start repository generation workflow
	StartRepositoryGeneration(context.Context, *RepositoryGenerationWorkflowRequest) (*WorkflowExecutionResponse, error)
	// Start code generation workflow
	StartCodeGeneration(context.Context, *CodeGenerationWorkflowRequest) (*WorkflowExecutionResponse, error)
	// Start knowledge synchronization workflow
	StartKnowledgeSync(context.Context, *KnowledgeSyncWorkflowRequest) (*WorkflowExecutionResponse, error)
	// Get workflow status
	GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*GetWorkflowStatusResponse, error)
	// Cancel workflow
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error)
	// List workflows for workspace
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error)
	mustEmbedUnimplementedWorkflowServiceServer()
}

// UnimplementedWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct {
}

func (UnimplementedWorkflowServiceServer) StartRepositoryGeneration(context.Context, *RepositoryGenerationWorkflowRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRepositoryGeneration not implemented")
}
func (UnimplementedWorkflowServiceServer) StartCodeGeneration(context.Context, *CodeGenerationWorkflowRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCodeGeneration not implemented")
}
func (UnimplementedWorkflowServiceServer) StartKnowledgeSync(context.Context, *KnowledgeSyncWorkflowRequest) (*WorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKnowledgeSync not implemented")
}
func (UnimplementedWorkflowServiceServer) GetWorkflowStatus(context.Context, *GetWorkflowStatusRequest) (*GetWorkflowStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowStatus not implemented")
}
func (UnimplementedWorkflowServiceServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*CancelWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (UnimplementedWorkflowServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*ListWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedWorkflowServiceServer) mustEmbedUnimplementedWorkflowServiceServer() {}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_StartRepositoryGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryGenerationWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartRepositoryGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartRepositoryGeneration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartRepositoryGeneration(ctx, req.(*RepositoryGenerationWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartCodeGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerationWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartCodeGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartCodeGeneration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartCodeGeneration(ctx, req.(*CodeGenerationWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_StartKnowledgeSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KnowledgeSyncWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).StartKnowledgeSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_StartKnowledgeSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).StartKnowledgeSync(ctx, req.(*KnowledgeSyncWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_GetWorkflowStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_GetWorkflowStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowStatus(ctx, req.(*GetWorkflowStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_CancelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idp.temporal.v1.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRepositoryGeneration",
			Handler:    _WorkflowService_StartRepositoryGeneration_Handler,
		},
		{
			MethodName: "StartCodeGeneration",
			Handler:    _WorkflowService_StartCodeGeneration_Handler,
		},
		{
			MethodName: "StartKnowledgeSync",
			Handler:    _WorkflowService_StartKnowledgeSync_Handler,
		},
		{
			MethodName: "GetWorkflowStatus",
			Handler:    _WorkflowService_GetWorkflowStatus_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _WorkflowService_CancelWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _WorkflowService_ListWorkflows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "temporal.proto",
}
