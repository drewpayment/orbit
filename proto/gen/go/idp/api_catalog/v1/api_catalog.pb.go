// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: api_catalog.proto

package api_catalogv1

import (
	v1 "github.com/drewpayment/orbit/proto/gen/go/idp/common/v1"
	v11 "github.com/drewpayment/orbit/proto/gen/go/idp/pagination/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchemaType int32

const (
	SchemaType_SCHEMA_TYPE_UNSPECIFIED SchemaType = 0
	SchemaType_SCHEMA_TYPE_OPENAPI     SchemaType = 1
	SchemaType_SCHEMA_TYPE_GRAPHQL     SchemaType = 2
	SchemaType_SCHEMA_TYPE_PROTOBUF    SchemaType = 3
	SchemaType_SCHEMA_TYPE_AVRO        SchemaType = 4
	SchemaType_SCHEMA_TYPE_JSON_SCHEMA SchemaType = 5
)

// Enum value maps for SchemaType.
var (
	SchemaType_name = map[int32]string{
		0: "SCHEMA_TYPE_UNSPECIFIED",
		1: "SCHEMA_TYPE_OPENAPI",
		2: "SCHEMA_TYPE_GRAPHQL",
		3: "SCHEMA_TYPE_PROTOBUF",
		4: "SCHEMA_TYPE_AVRO",
		5: "SCHEMA_TYPE_JSON_SCHEMA",
	}
	SchemaType_value = map[string]int32{
		"SCHEMA_TYPE_UNSPECIFIED": 0,
		"SCHEMA_TYPE_OPENAPI":     1,
		"SCHEMA_TYPE_GRAPHQL":     2,
		"SCHEMA_TYPE_PROTOBUF":    3,
		"SCHEMA_TYPE_AVRO":        4,
		"SCHEMA_TYPE_JSON_SCHEMA": 5,
	}
)

func (x SchemaType) Enum() *SchemaType {
	p := new(SchemaType)
	*p = x
	return p
}

func (x SchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_catalog_proto_enumTypes[0].Descriptor()
}

func (SchemaType) Type() protoreflect.EnumType {
	return &file_api_catalog_proto_enumTypes[0]
}

func (x SchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaType.Descriptor instead.
func (SchemaType) EnumDescriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{0}
}

type SchemaStatus int32

const (
	SchemaStatus_SCHEMA_STATUS_UNSPECIFIED SchemaStatus = 0
	SchemaStatus_SCHEMA_STATUS_DRAFT       SchemaStatus = 1
	SchemaStatus_SCHEMA_STATUS_PUBLISHED   SchemaStatus = 2
	SchemaStatus_SCHEMA_STATUS_DEPRECATED  SchemaStatus = 3
)

// Enum value maps for SchemaStatus.
var (
	SchemaStatus_name = map[int32]string{
		0: "SCHEMA_STATUS_UNSPECIFIED",
		1: "SCHEMA_STATUS_DRAFT",
		2: "SCHEMA_STATUS_PUBLISHED",
		3: "SCHEMA_STATUS_DEPRECATED",
	}
	SchemaStatus_value = map[string]int32{
		"SCHEMA_STATUS_UNSPECIFIED": 0,
		"SCHEMA_STATUS_DRAFT":       1,
		"SCHEMA_STATUS_PUBLISHED":   2,
		"SCHEMA_STATUS_DEPRECATED":  3,
	}
)

func (x SchemaStatus) Enum() *SchemaStatus {
	p := new(SchemaStatus)
	*p = x
	return p
}

func (x SchemaStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_catalog_proto_enumTypes[1].Descriptor()
}

func (SchemaStatus) Type() protoreflect.EnumType {
	return &file_api_catalog_proto_enumTypes[1]
}

func (x SchemaStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaStatus.Descriptor instead.
func (SchemaStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{1}
}

type ParameterLocation int32

const (
	ParameterLocation_PARAMETER_LOCATION_UNSPECIFIED ParameterLocation = 0
	ParameterLocation_PARAMETER_LOCATION_QUERY       ParameterLocation = 1
	ParameterLocation_PARAMETER_LOCATION_PATH        ParameterLocation = 2
	ParameterLocation_PARAMETER_LOCATION_HEADER      ParameterLocation = 3
	ParameterLocation_PARAMETER_LOCATION_COOKIE      ParameterLocation = 4
)

// Enum value maps for ParameterLocation.
var (
	ParameterLocation_name = map[int32]string{
		0: "PARAMETER_LOCATION_UNSPECIFIED",
		1: "PARAMETER_LOCATION_QUERY",
		2: "PARAMETER_LOCATION_PATH",
		3: "PARAMETER_LOCATION_HEADER",
		4: "PARAMETER_LOCATION_COOKIE",
	}
	ParameterLocation_value = map[string]int32{
		"PARAMETER_LOCATION_UNSPECIFIED": 0,
		"PARAMETER_LOCATION_QUERY":       1,
		"PARAMETER_LOCATION_PATH":        2,
		"PARAMETER_LOCATION_HEADER":      3,
		"PARAMETER_LOCATION_COOKIE":      4,
	}
)

func (x ParameterLocation) Enum() *ParameterLocation {
	p := new(ParameterLocation)
	*p = x
	return p
}

func (x ParameterLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_catalog_proto_enumTypes[2].Descriptor()
}

func (ParameterLocation) Type() protoreflect.EnumType {
	return &file_api_catalog_proto_enumTypes[2]
}

func (x ParameterLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterLocation.Descriptor instead.
func (ParameterLocation) EnumDescriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{2}
}

type ConsumerType int32

const (
	ConsumerType_CONSUMER_TYPE_UNSPECIFIED ConsumerType = 0
	ConsumerType_CONSUMER_TYPE_REPOSITORY  ConsumerType = 1
	ConsumerType_CONSUMER_TYPE_EXTERNAL    ConsumerType = 2
)

// Enum value maps for ConsumerType.
var (
	ConsumerType_name = map[int32]string{
		0: "CONSUMER_TYPE_UNSPECIFIED",
		1: "CONSUMER_TYPE_REPOSITORY",
		2: "CONSUMER_TYPE_EXTERNAL",
	}
	ConsumerType_value = map[string]int32{
		"CONSUMER_TYPE_UNSPECIFIED": 0,
		"CONSUMER_TYPE_REPOSITORY":  1,
		"CONSUMER_TYPE_EXTERNAL":    2,
	}
)

func (x ConsumerType) Enum() *ConsumerType {
	p := new(ConsumerType)
	*p = x
	return p
}

func (x ConsumerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsumerType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_catalog_proto_enumTypes[3].Descriptor()
}

func (ConsumerType) Type() protoreflect.EnumType {
	return &file_api_catalog_proto_enumTypes[3]
}

func (x ConsumerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsumerType.Descriptor instead.
func (ConsumerType) EnumDescriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{3}
}

// API Schema entity
type APISchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata    *v1.EntityMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Workspace   *v1.WorkspaceRef   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Repository  *v1.RepositoryRef  `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"` // Optional
	Name        string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string             `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	Version     string             `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Description string             `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Schema definition
	SchemaType    SchemaType `protobuf:"varint,8,opt,name=schema_type,json=schemaType,proto3,enum=idp.api_catalog.v1.SchemaType" json:"schema_type,omitempty"`
	SchemaContent *anypb.Any `protobuf:"bytes,9,opt,name=schema_content,json=schemaContent,proto3" json:"schema_content,omitempty"` // JSON representation
	RawContent    string     `protobuf:"bytes,10,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`         // Original schema content
	// Metadata
	Tags        []string     `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	ContactInfo *ContactInfo `protobuf:"bytes,12,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	License     string       `protobuf:"bytes,13,opt,name=license,proto3" json:"license,omitempty"`
	// Lifecycle
	Status       SchemaStatus           `protobuf:"varint,14,opt,name=status,proto3,enum=idp.api_catalog.v1.SchemaStatus" json:"status,omitempty"`
	PublishedAt  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	DeprecatedAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=deprecated_at,json=deprecatedAt,proto3" json:"deprecated_at,omitempty"`
	// Relations
	Endpoints []*APIEndpoint `protobuf:"bytes,17,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Consumers []*APIConsumer `protobuf:"bytes,18,rep,name=consumers,proto3" json:"consumers,omitempty"`
	Stats     *SchemaStats   `protobuf:"bytes,19,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *APISchema) Reset() {
	*x = APISchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APISchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APISchema) ProtoMessage() {}

func (x *APISchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APISchema.ProtoReflect.Descriptor instead.
func (*APISchema) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *APISchema) GetMetadata() *v1.EntityMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *APISchema) GetWorkspace() *v1.WorkspaceRef {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *APISchema) GetRepository() *v1.RepositoryRef {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *APISchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APISchema) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *APISchema) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *APISchema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APISchema) GetSchemaType() SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

func (x *APISchema) GetSchemaContent() *anypb.Any {
	if x != nil {
		return x.SchemaContent
	}
	return nil
}

func (x *APISchema) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *APISchema) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *APISchema) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *APISchema) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *APISchema) GetStatus() SchemaStatus {
	if x != nil {
		return x.Status
	}
	return SchemaStatus_SCHEMA_STATUS_UNSPECIFIED
}

func (x *APISchema) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *APISchema) GetDeprecatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeprecatedAt
	}
	return nil
}

func (x *APISchema) GetEndpoints() []*APIEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *APISchema) GetConsumers() []*APIConsumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *APISchema) GetStats() *SchemaStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *ContactInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContactInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ContactInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// API Endpoint
type APIEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId    string          `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Method      string          `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Path        string          `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Summary     string          `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Parameters  []*APIParameter `protobuf:"bytes,7,rep,name=parameters,proto3" json:"parameters,omitempty"`
	RequestBody *APIRequestBody `protobuf:"bytes,8,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	Responses   []*APIResponse  `protobuf:"bytes,9,rep,name=responses,proto3" json:"responses,omitempty"`
	Tags        []string        `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *APIEndpoint) Reset() {
	*x = APIEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIEndpoint) ProtoMessage() {}

func (x *APIEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIEndpoint.ProtoReflect.Descriptor instead.
func (*APIEndpoint) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *APIEndpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIEndpoint) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *APIEndpoint) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *APIEndpoint) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *APIEndpoint) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *APIEndpoint) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIEndpoint) GetParameters() []*APIParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *APIEndpoint) GetRequestBody() *APIRequestBody {
	if x != nil {
		return x.RequestBody
	}
	return nil
}

func (x *APIEndpoint) GetResponses() []*APIResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *APIEndpoint) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type APIParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Location    ParameterLocation `protobuf:"varint,2,opt,name=location,proto3,enum=idp.api_catalog.v1.ParameterLocation" json:"location,omitempty"`
	Required    bool              `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	Type        string            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Example     *anypb.Any        `protobuf:"bytes,6,opt,name=example,proto3" json:"example,omitempty"`
}

func (x *APIParameter) Reset() {
	*x = APIParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIParameter) ProtoMessage() {}

func (x *APIParameter) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIParameter.ProtoReflect.Descriptor instead.
func (*APIParameter) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *APIParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIParameter) GetLocation() ParameterLocation {
	if x != nil {
		return x.Location
	}
	return ParameterLocation_PARAMETER_LOCATION_UNSPECIFIED
}

func (x *APIParameter) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *APIParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *APIParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIParameter) GetExample() *anypb.Any {
	if x != nil {
		return x.Example
	}
	return nil
}

type APIRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Required    bool                  `protobuf:"varint,2,opt,name=required,proto3" json:"required,omitempty"`
	Content     map[string]*MediaType `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *APIRequestBody) Reset() {
	*x = APIRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRequestBody) ProtoMessage() {}

func (x *APIRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRequestBody.ProtoReflect.Descriptor instead.
func (*APIRequestBody) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{4}
}

func (x *APIRequestBody) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIRequestBody) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *APIRequestBody) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

type APIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string                `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Content     map[string]*MediaType `protobuf:"bytes,3,rep,name=content,proto3" json:"content,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Headers     map[string]string     `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *APIResponse) Reset() {
	*x = APIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIResponse) ProtoMessage() {}

func (x *APIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIResponse.ProtoReflect.Descriptor instead.
func (*APIResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{5}
}

func (x *APIResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *APIResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *APIResponse) GetContent() map[string]*MediaType {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *APIResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type MediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema  *anypb.Any `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Example *anypb.Any `protobuf:"bytes,2,opt,name=example,proto3" json:"example,omitempty"`
}

func (x *MediaType) Reset() {
	*x = MediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaType) ProtoMessage() {}

func (x *MediaType) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaType.ProtoReflect.Descriptor instead.
func (*MediaType) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *MediaType) GetSchema() *anypb.Any {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *MediaType) GetExample() *anypb.Any {
	if x != nil {
		return x.Example
	}
	return nil
}

// API Consumer
type APIConsumer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SchemaId     string                 `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Repository   *v1.RepositoryRef      `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"` // Optional
	ConsumerType ConsumerType           `protobuf:"varint,4,opt,name=consumer_type,json=consumerType,proto3,enum=idp.api_catalog.v1.ConsumerType" json:"consumer_type,omitempty"`
	Name         string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ContactEmail string                 `protobuf:"bytes,6,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	RegisteredAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=registered_at,json=registeredAt,proto3" json:"registered_at,omitempty"`
	RegisteredBy *v1.UserRef            `protobuf:"bytes,8,opt,name=registered_by,json=registeredBy,proto3" json:"registered_by,omitempty"`
}

func (x *APIConsumer) Reset() {
	*x = APIConsumer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIConsumer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIConsumer) ProtoMessage() {}

func (x *APIConsumer) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIConsumer.ProtoReflect.Descriptor instead.
func (*APIConsumer) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{7}
}

func (x *APIConsumer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *APIConsumer) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *APIConsumer) GetRepository() *v1.RepositoryRef {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *APIConsumer) GetConsumerType() ConsumerType {
	if x != nil {
		return x.ConsumerType
	}
	return ConsumerType_CONSUMER_TYPE_UNSPECIFIED
}

func (x *APIConsumer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *APIConsumer) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *APIConsumer) GetRegisteredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RegisteredAt
	}
	return nil
}

func (x *APIConsumer) GetRegisteredBy() *v1.UserRef {
	if x != nil {
		return x.RegisteredBy
	}
	return nil
}

// Schema statistics
type SchemaStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointCount int32                  `protobuf:"varint,1,opt,name=endpoint_count,json=endpointCount,proto3" json:"endpoint_count,omitempty"`
	ConsumerCount int32                  `protobuf:"varint,2,opt,name=consumer_count,json=consumerCount,proto3" json:"consumer_count,omitempty"`
	LastUpdated   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	VersionCount  int32                  `protobuf:"varint,4,opt,name=version_count,json=versionCount,proto3" json:"version_count,omitempty"`
}

func (x *SchemaStats) Reset() {
	*x = SchemaStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaStats) ProtoMessage() {}

func (x *SchemaStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaStats.ProtoReflect.Descriptor instead.
func (*SchemaStats) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{8}
}

func (x *SchemaStats) GetEndpointCount() int32 {
	if x != nil {
		return x.EndpointCount
	}
	return 0
}

func (x *SchemaStats) GetConsumerCount() int32 {
	if x != nil {
		return x.ConsumerCount
	}
	return 0
}

func (x *SchemaStats) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *SchemaStats) GetVersionCount() int32 {
	if x != nil {
		return x.VersionCount
	}
	return 0
}

type CreateSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceId  string       `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	RepositoryId string       `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"` // Optional
	Name         string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Slug         string       `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Version      string       `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Description  string       `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	SchemaType   SchemaType   `protobuf:"varint,7,opt,name=schema_type,json=schemaType,proto3,enum=idp.api_catalog.v1.SchemaType" json:"schema_type,omitempty"`
	RawContent   string       `protobuf:"bytes,8,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	Tags         []string     `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	ContactInfo  *ContactInfo `protobuf:"bytes,10,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	License      string       `protobuf:"bytes,11,opt,name=license,proto3" json:"license,omitempty"`
}

func (x *CreateSchemaRequest) Reset() {
	*x = CreateSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaRequest) ProtoMessage() {}

func (x *CreateSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaRequest.ProtoReflect.Descriptor instead.
func (*CreateSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{9}
}

func (x *CreateSchemaRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CreateSchemaRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *CreateSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSchemaRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateSchemaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateSchemaRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSchemaRequest) GetSchemaType() SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

func (x *CreateSchemaRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *CreateSchemaRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateSchemaRequest) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *CreateSchemaRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type CreateSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schema   *APISchema   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CreateSchemaResponse) Reset() {
	*x = CreateSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaResponse) ProtoMessage() {}

func (x *CreateSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaResponse.ProtoReflect.Descriptor instead.
func (*CreateSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{10}
}

func (x *CreateSchemaResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CreateSchemaResponse) GetSchema() *APISchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Optional, gets latest if not specified
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{11}
}

func (x *GetSchemaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSchemaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schema   *APISchema   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{12}
}

func (x *GetSchemaResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetSchemaResponse) GetSchema() *APISchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ListSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceId  string                 `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	RepositoryId string                 `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"` // Optional filter
	Pagination   *v11.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filters      []*v1.Filter           `protobuf:"bytes,4,rep,name=filters,proto3" json:"filters,omitempty"`
	Sort         []*v1.Sort             `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ListSchemasRequest) Reset() {
	*x = ListSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemasRequest) ProtoMessage() {}

func (x *ListSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemasRequest.ProtoReflect.Descriptor instead.
func (*ListSchemasRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{13}
}

func (x *ListSchemasRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ListSchemasRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *ListSchemasRequest) GetPagination() *v11.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSchemasRequest) GetFilters() []*v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListSchemasRequest) GetSort() []*v1.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

type ListSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *v1.Response            `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schemas    []*APISchema            `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Pagination *v11.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSchemasResponse) Reset() {
	*x = ListSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSchemasResponse) ProtoMessage() {}

func (x *ListSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSchemasResponse.ProtoReflect.Descriptor instead.
func (*ListSchemasResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{14}
}

func (x *ListSchemasResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListSchemasResponse) GetSchemas() []*APISchema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *ListSchemasResponse) GetPagination() *v11.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UpdateSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	RawContent  string       `protobuf:"bytes,4,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
	Tags        []string     `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	ContactInfo *ContactInfo `protobuf:"bytes,6,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	License     string       `protobuf:"bytes,7,opt,name=license,proto3" json:"license,omitempty"`
	Status      SchemaStatus `protobuf:"varint,8,opt,name=status,proto3,enum=idp.api_catalog.v1.SchemaStatus" json:"status,omitempty"`
}

func (x *UpdateSchemaRequest) Reset() {
	*x = UpdateSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemaRequest) ProtoMessage() {}

func (x *UpdateSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemaRequest.ProtoReflect.Descriptor instead.
func (*UpdateSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSchemaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSchemaRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSchemaRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

func (x *UpdateSchemaRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateSchemaRequest) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *UpdateSchemaRequest) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *UpdateSchemaRequest) GetStatus() SchemaStatus {
	if x != nil {
		return x.Status
	}
	return SchemaStatus_SCHEMA_STATUS_UNSPECIFIED
}

type UpdateSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schema   *APISchema   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *UpdateSchemaResponse) Reset() {
	*x = UpdateSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSchemaResponse) ProtoMessage() {}

func (x *UpdateSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSchemaResponse.ProtoReflect.Descriptor instead.
func (*UpdateSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateSchemaResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *UpdateSchemaResponse) GetSchema() *APISchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type DeleteSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSchemaRequest) Reset() {
	*x = DeleteSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemaRequest) ProtoMessage() {}

func (x *DeleteSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemaRequest.ProtoReflect.Descriptor instead.
func (*DeleteSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteSchemaRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DeleteSchemaResponse) Reset() {
	*x = DeleteSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSchemaResponse) ProtoMessage() {}

func (x *DeleteSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSchemaResponse.ProtoReflect.Descriptor instead.
func (*DeleteSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteSchemaResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Schema validation
type ValidateSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaType SchemaType `protobuf:"varint,1,opt,name=schema_type,json=schemaType,proto3,enum=idp.api_catalog.v1.SchemaType" json:"schema_type,omitempty"`
	RawContent string     `protobuf:"bytes,2,opt,name=raw_content,json=rawContent,proto3" json:"raw_content,omitempty"`
}

func (x *ValidateSchemaRequest) Reset() {
	*x = ValidateSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSchemaRequest) ProtoMessage() {}

func (x *ValidateSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSchemaRequest.ProtoReflect.Descriptor instead.
func (*ValidateSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{19}
}

func (x *ValidateSchemaRequest) GetSchemaType() SchemaType {
	if x != nil {
		return x.SchemaType
	}
	return SchemaType_SCHEMA_TYPE_UNSPECIFIED
}

func (x *ValidateSchemaRequest) GetRawContent() string {
	if x != nil {
		return x.RawContent
	}
	return ""
}

type ValidateSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response         *v1.Response       `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	IsValid          bool               `protobuf:"varint,2,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	ValidationErrors []*ValidationError `protobuf:"bytes,3,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
}

func (x *ValidateSchemaResponse) Reset() {
	*x = ValidateSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSchemaResponse) ProtoMessage() {}

func (x *ValidateSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSchemaResponse.ProtoReflect.Descriptor instead.
func (*ValidateSchemaResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{20}
}

func (x *ValidateSchemaResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ValidateSchemaResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *ValidateSchemaResponse) GetValidationErrors() []*ValidationError {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ErrorCode string `protobuf:"bytes,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{21}
}

func (x *ValidationError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ValidationError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidationError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

// Consumer management
type RegisterConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId     string       `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	RepositoryId string       `protobuf:"bytes,2,opt,name=repository_id,json=repositoryId,proto3" json:"repository_id,omitempty"` // Optional
	ConsumerType ConsumerType `protobuf:"varint,3,opt,name=consumer_type,json=consumerType,proto3,enum=idp.api_catalog.v1.ConsumerType" json:"consumer_type,omitempty"`
	Name         string       `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ContactEmail string       `protobuf:"bytes,5,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
}

func (x *RegisterConsumerRequest) Reset() {
	*x = RegisterConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerRequest) ProtoMessage() {}

func (x *RegisterConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerRequest.ProtoReflect.Descriptor instead.
func (*RegisterConsumerRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{22}
}

func (x *RegisterConsumerRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *RegisterConsumerRequest) GetRepositoryId() string {
	if x != nil {
		return x.RepositoryId
	}
	return ""
}

func (x *RegisterConsumerRequest) GetConsumerType() ConsumerType {
	if x != nil {
		return x.ConsumerType
	}
	return ConsumerType_CONSUMER_TYPE_UNSPECIFIED
}

func (x *RegisterConsumerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterConsumerRequest) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

type RegisterConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Consumer *APIConsumer `protobuf:"bytes,2,opt,name=consumer,proto3" json:"consumer,omitempty"`
}

func (x *RegisterConsumerResponse) Reset() {
	*x = RegisterConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterConsumerResponse) ProtoMessage() {}

func (x *RegisterConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterConsumerResponse.ProtoReflect.Descriptor instead.
func (*RegisterConsumerResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterConsumerResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *RegisterConsumerResponse) GetConsumer() *APIConsumer {
	if x != nil {
		return x.Consumer
	}
	return nil
}

type ListConsumersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId   string                 `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Pagination *v11.PaginationRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Filters    []*v1.Filter           `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListConsumersRequest) Reset() {
	*x = ListConsumersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersRequest) ProtoMessage() {}

func (x *ListConsumersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersRequest.ProtoReflect.Descriptor instead.
func (*ListConsumersRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{24}
}

func (x *ListConsumersRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *ListConsumersRequest) GetPagination() *v11.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListConsumersRequest) GetFilters() []*v1.Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ListConsumersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *v1.Response            `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Consumers  []*APIConsumer          `protobuf:"bytes,2,rep,name=consumers,proto3" json:"consumers,omitempty"`
	Pagination *v11.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListConsumersResponse) Reset() {
	*x = ListConsumersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConsumersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsumersResponse) ProtoMessage() {}

func (x *ListConsumersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsumersResponse.ProtoReflect.Descriptor instead.
func (*ListConsumersResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{25}
}

func (x *ListConsumersResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListConsumersResponse) GetConsumers() []*APIConsumer {
	if x != nil {
		return x.Consumers
	}
	return nil
}

func (x *ListConsumersResponse) GetPagination() *v11.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type RemoveConsumerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId   string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	ConsumerId string `protobuf:"bytes,2,opt,name=consumer_id,json=consumerId,proto3" json:"consumer_id,omitempty"`
}

func (x *RemoveConsumerRequest) Reset() {
	*x = RemoveConsumerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConsumerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConsumerRequest) ProtoMessage() {}

func (x *RemoveConsumerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConsumerRequest.ProtoReflect.Descriptor instead.
func (*RemoveConsumerRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveConsumerRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *RemoveConsumerRequest) GetConsumerId() string {
	if x != nil {
		return x.ConsumerId
	}
	return ""
}

type RemoveConsumerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.Response `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *RemoveConsumerResponse) Reset() {
	*x = RemoveConsumerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConsumerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConsumerResponse) ProtoMessage() {}

func (x *RemoveConsumerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConsumerResponse.ProtoReflect.Descriptor instead.
func (*RemoveConsumerResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveConsumerResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

// Discovery
type SearchSchemasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkspaceId string                 `protobuf:"bytes,1,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Query       string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	SchemaTypes []SchemaType           `protobuf:"varint,3,rep,packed,name=schema_types,json=schemaTypes,proto3,enum=idp.api_catalog.v1.SchemaType" json:"schema_types,omitempty"`
	Tags        []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Pagination  *v11.PaginationRequest `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchSchemasRequest) Reset() {
	*x = SearchSchemasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSchemasRequest) ProtoMessage() {}

func (x *SearchSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSchemasRequest.ProtoReflect.Descriptor instead.
func (*SearchSchemasRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{28}
}

func (x *SearchSchemasRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *SearchSchemasRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchSchemasRequest) GetSchemaTypes() []SchemaType {
	if x != nil {
		return x.SchemaTypes
	}
	return nil
}

func (x *SearchSchemasRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SearchSchemasRequest) GetPagination() *v11.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchSchemasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *v1.Response            `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schemas    []*APISchema            `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	Pagination *v11.PaginationResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchSchemasResponse) Reset() {
	*x = SearchSchemasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSchemasResponse) ProtoMessage() {}

func (x *SearchSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSchemasResponse.ProtoReflect.Descriptor instead.
func (*SearchSchemasResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{29}
}

func (x *SearchSchemasResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SearchSchemasResponse) GetSchemas() []*APISchema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *SearchSchemasResponse) GetPagination() *v11.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetSchemaDependenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchemaId  string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"` // "dependencies", "dependents", "both"
}

func (x *GetSchemaDependenciesRequest) Reset() {
	*x = GetSchemaDependenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaDependenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaDependenciesRequest) ProtoMessage() {}

func (x *GetSchemaDependenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaDependenciesRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaDependenciesRequest) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{30}
}

func (x *GetSchemaDependenciesRequest) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *GetSchemaDependenciesRequest) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type GetSchemaDependenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response     *v1.Response        `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Dependencies []*SchemaDependency `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *GetSchemaDependenciesResponse) Reset() {
	*x = GetSchemaDependenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchemaDependenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaDependenciesResponse) ProtoMessage() {}

func (x *GetSchemaDependenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaDependenciesResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaDependenciesResponse) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{31}
}

func (x *GetSchemaDependenciesResponse) GetResponse() *v1.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *GetSchemaDependenciesResponse) GetDependencies() []*SchemaDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type SchemaDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema           *APISchema             `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	RelationshipType string                 `protobuf:"bytes,2,opt,name=relationship_type,json=relationshipType,proto3" json:"relationship_type,omitempty"` // "imports", "extends", "references"
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SchemaDependency) Reset() {
	*x = SchemaDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_catalog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaDependency) ProtoMessage() {}

func (x *SchemaDependency) ProtoReflect() protoreflect.Message {
	mi := &file_api_catalog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaDependency.ProtoReflect.Descriptor instead.
func (*SchemaDependency) Descriptor() ([]byte, []int) {
	return file_api_catalog_proto_rawDescGZIP(), []int{32}
}

func (x *SchemaDependency) GetSchema() *APISchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SchemaDependency) GetRelationshipType() string {
	if x != nil {
		return x.RelationshipType
	}
	return ""
}

func (x *SchemaDependency) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_api_catalog_proto protoreflect.FileDescriptor

var file_api_catalog_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x07, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xfe, 0x02, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22,
	0xf4, 0x01, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x59, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x02, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x59, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2e,
	0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0xf6,
	0x02, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x03, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0xc6, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a,
	0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x50, 0x49,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x64,
	0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x69, 0x64, 0x70,
	0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x50, 0x49, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0xa8, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41,
	0x50, 0x48, 0x51, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x56, 0x52, 0x4f, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x05, 0x2a, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x02, 0x32, 0x81, 0x09, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x24, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x26, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x69, 0x64, 0x70, 0x2e,
	0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x69,
	0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70,
	0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x73, 0x12, 0x28, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x69, 0x64, 0x70, 0x2e, 0x61, 0x70, 0x69, 0x5f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x65, 0x77, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x64, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_catalog_proto_rawDescOnce sync.Once
	file_api_catalog_proto_rawDescData = file_api_catalog_proto_rawDesc
)

func file_api_catalog_proto_rawDescGZIP() []byte {
	file_api_catalog_proto_rawDescOnce.Do(func() {
		file_api_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_catalog_proto_rawDescData)
	})
	return file_api_catalog_proto_rawDescData
}

var file_api_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_api_catalog_proto_goTypes = []any{
	(SchemaType)(0),                       // 0: idp.api_catalog.v1.SchemaType
	(SchemaStatus)(0),                     // 1: idp.api_catalog.v1.SchemaStatus
	(ParameterLocation)(0),                // 2: idp.api_catalog.v1.ParameterLocation
	(ConsumerType)(0),                     // 3: idp.api_catalog.v1.ConsumerType
	(*APISchema)(nil),                     // 4: idp.api_catalog.v1.APISchema
	(*ContactInfo)(nil),                   // 5: idp.api_catalog.v1.ContactInfo
	(*APIEndpoint)(nil),                   // 6: idp.api_catalog.v1.APIEndpoint
	(*APIParameter)(nil),                  // 7: idp.api_catalog.v1.APIParameter
	(*APIRequestBody)(nil),                // 8: idp.api_catalog.v1.APIRequestBody
	(*APIResponse)(nil),                   // 9: idp.api_catalog.v1.APIResponse
	(*MediaType)(nil),                     // 10: idp.api_catalog.v1.MediaType
	(*APIConsumer)(nil),                   // 11: idp.api_catalog.v1.APIConsumer
	(*SchemaStats)(nil),                   // 12: idp.api_catalog.v1.SchemaStats
	(*CreateSchemaRequest)(nil),           // 13: idp.api_catalog.v1.CreateSchemaRequest
	(*CreateSchemaResponse)(nil),          // 14: idp.api_catalog.v1.CreateSchemaResponse
	(*GetSchemaRequest)(nil),              // 15: idp.api_catalog.v1.GetSchemaRequest
	(*GetSchemaResponse)(nil),             // 16: idp.api_catalog.v1.GetSchemaResponse
	(*ListSchemasRequest)(nil),            // 17: idp.api_catalog.v1.ListSchemasRequest
	(*ListSchemasResponse)(nil),           // 18: idp.api_catalog.v1.ListSchemasResponse
	(*UpdateSchemaRequest)(nil),           // 19: idp.api_catalog.v1.UpdateSchemaRequest
	(*UpdateSchemaResponse)(nil),          // 20: idp.api_catalog.v1.UpdateSchemaResponse
	(*DeleteSchemaRequest)(nil),           // 21: idp.api_catalog.v1.DeleteSchemaRequest
	(*DeleteSchemaResponse)(nil),          // 22: idp.api_catalog.v1.DeleteSchemaResponse
	(*ValidateSchemaRequest)(nil),         // 23: idp.api_catalog.v1.ValidateSchemaRequest
	(*ValidateSchemaResponse)(nil),        // 24: idp.api_catalog.v1.ValidateSchemaResponse
	(*ValidationError)(nil),               // 25: idp.api_catalog.v1.ValidationError
	(*RegisterConsumerRequest)(nil),       // 26: idp.api_catalog.v1.RegisterConsumerRequest
	(*RegisterConsumerResponse)(nil),      // 27: idp.api_catalog.v1.RegisterConsumerResponse
	(*ListConsumersRequest)(nil),          // 28: idp.api_catalog.v1.ListConsumersRequest
	(*ListConsumersResponse)(nil),         // 29: idp.api_catalog.v1.ListConsumersResponse
	(*RemoveConsumerRequest)(nil),         // 30: idp.api_catalog.v1.RemoveConsumerRequest
	(*RemoveConsumerResponse)(nil),        // 31: idp.api_catalog.v1.RemoveConsumerResponse
	(*SearchSchemasRequest)(nil),          // 32: idp.api_catalog.v1.SearchSchemasRequest
	(*SearchSchemasResponse)(nil),         // 33: idp.api_catalog.v1.SearchSchemasResponse
	(*GetSchemaDependenciesRequest)(nil),  // 34: idp.api_catalog.v1.GetSchemaDependenciesRequest
	(*GetSchemaDependenciesResponse)(nil), // 35: idp.api_catalog.v1.GetSchemaDependenciesResponse
	(*SchemaDependency)(nil),              // 36: idp.api_catalog.v1.SchemaDependency
	nil,                                   // 37: idp.api_catalog.v1.APIRequestBody.ContentEntry
	nil,                                   // 38: idp.api_catalog.v1.APIResponse.ContentEntry
	nil,                                   // 39: idp.api_catalog.v1.APIResponse.HeadersEntry
	(*v1.EntityMetadata)(nil),             // 40: idp.common.v1.EntityMetadata
	(*v1.WorkspaceRef)(nil),               // 41: idp.common.v1.WorkspaceRef
	(*v1.RepositoryRef)(nil),              // 42: idp.common.v1.RepositoryRef
	(*anypb.Any)(nil),                     // 43: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),         // 44: google.protobuf.Timestamp
	(*v1.UserRef)(nil),                    // 45: idp.common.v1.UserRef
	(*v1.Response)(nil),                   // 46: idp.common.v1.Response
	(*v11.PaginationRequest)(nil),         // 47: idp.common.v1.PaginationRequest
	(*v1.Filter)(nil),                     // 48: idp.common.v1.Filter
	(*v1.Sort)(nil),                       // 49: idp.common.v1.Sort
	(*v11.PaginationResponse)(nil),        // 50: idp.common.v1.PaginationResponse
}
var file_api_catalog_proto_depIdxs = []int32{
	40, // 0: idp.api_catalog.v1.APISchema.metadata:type_name -> idp.common.v1.EntityMetadata
	41, // 1: idp.api_catalog.v1.APISchema.workspace:type_name -> idp.common.v1.WorkspaceRef
	42, // 2: idp.api_catalog.v1.APISchema.repository:type_name -> idp.common.v1.RepositoryRef
	0,  // 3: idp.api_catalog.v1.APISchema.schema_type:type_name -> idp.api_catalog.v1.SchemaType
	43, // 4: idp.api_catalog.v1.APISchema.schema_content:type_name -> google.protobuf.Any
	5,  // 5: idp.api_catalog.v1.APISchema.contact_info:type_name -> idp.api_catalog.v1.ContactInfo
	1,  // 6: idp.api_catalog.v1.APISchema.status:type_name -> idp.api_catalog.v1.SchemaStatus
	44, // 7: idp.api_catalog.v1.APISchema.published_at:type_name -> google.protobuf.Timestamp
	44, // 8: idp.api_catalog.v1.APISchema.deprecated_at:type_name -> google.protobuf.Timestamp
	6,  // 9: idp.api_catalog.v1.APISchema.endpoints:type_name -> idp.api_catalog.v1.APIEndpoint
	11, // 10: idp.api_catalog.v1.APISchema.consumers:type_name -> idp.api_catalog.v1.APIConsumer
	12, // 11: idp.api_catalog.v1.APISchema.stats:type_name -> idp.api_catalog.v1.SchemaStats
	7,  // 12: idp.api_catalog.v1.APIEndpoint.parameters:type_name -> idp.api_catalog.v1.APIParameter
	8,  // 13: idp.api_catalog.v1.APIEndpoint.request_body:type_name -> idp.api_catalog.v1.APIRequestBody
	9,  // 14: idp.api_catalog.v1.APIEndpoint.responses:type_name -> idp.api_catalog.v1.APIResponse
	2,  // 15: idp.api_catalog.v1.APIParameter.location:type_name -> idp.api_catalog.v1.ParameterLocation
	43, // 16: idp.api_catalog.v1.APIParameter.example:type_name -> google.protobuf.Any
	37, // 17: idp.api_catalog.v1.APIRequestBody.content:type_name -> idp.api_catalog.v1.APIRequestBody.ContentEntry
	38, // 18: idp.api_catalog.v1.APIResponse.content:type_name -> idp.api_catalog.v1.APIResponse.ContentEntry
	39, // 19: idp.api_catalog.v1.APIResponse.headers:type_name -> idp.api_catalog.v1.APIResponse.HeadersEntry
	43, // 20: idp.api_catalog.v1.MediaType.schema:type_name -> google.protobuf.Any
	43, // 21: idp.api_catalog.v1.MediaType.example:type_name -> google.protobuf.Any
	42, // 22: idp.api_catalog.v1.APIConsumer.repository:type_name -> idp.common.v1.RepositoryRef
	3,  // 23: idp.api_catalog.v1.APIConsumer.consumer_type:type_name -> idp.api_catalog.v1.ConsumerType
	44, // 24: idp.api_catalog.v1.APIConsumer.registered_at:type_name -> google.protobuf.Timestamp
	45, // 25: idp.api_catalog.v1.APIConsumer.registered_by:type_name -> idp.common.v1.UserRef
	44, // 26: idp.api_catalog.v1.SchemaStats.last_updated:type_name -> google.protobuf.Timestamp
	0,  // 27: idp.api_catalog.v1.CreateSchemaRequest.schema_type:type_name -> idp.api_catalog.v1.SchemaType
	5,  // 28: idp.api_catalog.v1.CreateSchemaRequest.contact_info:type_name -> idp.api_catalog.v1.ContactInfo
	46, // 29: idp.api_catalog.v1.CreateSchemaResponse.response:type_name -> idp.common.v1.Response
	4,  // 30: idp.api_catalog.v1.CreateSchemaResponse.schema:type_name -> idp.api_catalog.v1.APISchema
	46, // 31: idp.api_catalog.v1.GetSchemaResponse.response:type_name -> idp.common.v1.Response
	4,  // 32: idp.api_catalog.v1.GetSchemaResponse.schema:type_name -> idp.api_catalog.v1.APISchema
	47, // 33: idp.api_catalog.v1.ListSchemasRequest.pagination:type_name -> idp.common.v1.PaginationRequest
	48, // 34: idp.api_catalog.v1.ListSchemasRequest.filters:type_name -> idp.common.v1.Filter
	49, // 35: idp.api_catalog.v1.ListSchemasRequest.sort:type_name -> idp.common.v1.Sort
	46, // 36: idp.api_catalog.v1.ListSchemasResponse.response:type_name -> idp.common.v1.Response
	4,  // 37: idp.api_catalog.v1.ListSchemasResponse.schemas:type_name -> idp.api_catalog.v1.APISchema
	50, // 38: idp.api_catalog.v1.ListSchemasResponse.pagination:type_name -> idp.common.v1.PaginationResponse
	5,  // 39: idp.api_catalog.v1.UpdateSchemaRequest.contact_info:type_name -> idp.api_catalog.v1.ContactInfo
	1,  // 40: idp.api_catalog.v1.UpdateSchemaRequest.status:type_name -> idp.api_catalog.v1.SchemaStatus
	46, // 41: idp.api_catalog.v1.UpdateSchemaResponse.response:type_name -> idp.common.v1.Response
	4,  // 42: idp.api_catalog.v1.UpdateSchemaResponse.schema:type_name -> idp.api_catalog.v1.APISchema
	46, // 43: idp.api_catalog.v1.DeleteSchemaResponse.response:type_name -> idp.common.v1.Response
	0,  // 44: idp.api_catalog.v1.ValidateSchemaRequest.schema_type:type_name -> idp.api_catalog.v1.SchemaType
	46, // 45: idp.api_catalog.v1.ValidateSchemaResponse.response:type_name -> idp.common.v1.Response
	25, // 46: idp.api_catalog.v1.ValidateSchemaResponse.validation_errors:type_name -> idp.api_catalog.v1.ValidationError
	3,  // 47: idp.api_catalog.v1.RegisterConsumerRequest.consumer_type:type_name -> idp.api_catalog.v1.ConsumerType
	46, // 48: idp.api_catalog.v1.RegisterConsumerResponse.response:type_name -> idp.common.v1.Response
	11, // 49: idp.api_catalog.v1.RegisterConsumerResponse.consumer:type_name -> idp.api_catalog.v1.APIConsumer
	47, // 50: idp.api_catalog.v1.ListConsumersRequest.pagination:type_name -> idp.common.v1.PaginationRequest
	48, // 51: idp.api_catalog.v1.ListConsumersRequest.filters:type_name -> idp.common.v1.Filter
	46, // 52: idp.api_catalog.v1.ListConsumersResponse.response:type_name -> idp.common.v1.Response
	11, // 53: idp.api_catalog.v1.ListConsumersResponse.consumers:type_name -> idp.api_catalog.v1.APIConsumer
	50, // 54: idp.api_catalog.v1.ListConsumersResponse.pagination:type_name -> idp.common.v1.PaginationResponse
	46, // 55: idp.api_catalog.v1.RemoveConsumerResponse.response:type_name -> idp.common.v1.Response
	0,  // 56: idp.api_catalog.v1.SearchSchemasRequest.schema_types:type_name -> idp.api_catalog.v1.SchemaType
	47, // 57: idp.api_catalog.v1.SearchSchemasRequest.pagination:type_name -> idp.common.v1.PaginationRequest
	46, // 58: idp.api_catalog.v1.SearchSchemasResponse.response:type_name -> idp.common.v1.Response
	4,  // 59: idp.api_catalog.v1.SearchSchemasResponse.schemas:type_name -> idp.api_catalog.v1.APISchema
	50, // 60: idp.api_catalog.v1.SearchSchemasResponse.pagination:type_name -> idp.common.v1.PaginationResponse
	46, // 61: idp.api_catalog.v1.GetSchemaDependenciesResponse.response:type_name -> idp.common.v1.Response
	36, // 62: idp.api_catalog.v1.GetSchemaDependenciesResponse.dependencies:type_name -> idp.api_catalog.v1.SchemaDependency
	4,  // 63: idp.api_catalog.v1.SchemaDependency.schema:type_name -> idp.api_catalog.v1.APISchema
	44, // 64: idp.api_catalog.v1.SchemaDependency.created_at:type_name -> google.protobuf.Timestamp
	10, // 65: idp.api_catalog.v1.APIRequestBody.ContentEntry.value:type_name -> idp.api_catalog.v1.MediaType
	10, // 66: idp.api_catalog.v1.APIResponse.ContentEntry.value:type_name -> idp.api_catalog.v1.MediaType
	13, // 67: idp.api_catalog.v1.APICatalogService.CreateSchema:input_type -> idp.api_catalog.v1.CreateSchemaRequest
	15, // 68: idp.api_catalog.v1.APICatalogService.GetSchema:input_type -> idp.api_catalog.v1.GetSchemaRequest
	17, // 69: idp.api_catalog.v1.APICatalogService.ListSchemas:input_type -> idp.api_catalog.v1.ListSchemasRequest
	19, // 70: idp.api_catalog.v1.APICatalogService.UpdateSchema:input_type -> idp.api_catalog.v1.UpdateSchemaRequest
	21, // 71: idp.api_catalog.v1.APICatalogService.DeleteSchema:input_type -> idp.api_catalog.v1.DeleteSchemaRequest
	23, // 72: idp.api_catalog.v1.APICatalogService.ValidateSchema:input_type -> idp.api_catalog.v1.ValidateSchemaRequest
	26, // 73: idp.api_catalog.v1.APICatalogService.RegisterConsumer:input_type -> idp.api_catalog.v1.RegisterConsumerRequest
	28, // 74: idp.api_catalog.v1.APICatalogService.ListConsumers:input_type -> idp.api_catalog.v1.ListConsumersRequest
	30, // 75: idp.api_catalog.v1.APICatalogService.RemoveConsumer:input_type -> idp.api_catalog.v1.RemoveConsumerRequest
	32, // 76: idp.api_catalog.v1.APICatalogService.SearchSchemas:input_type -> idp.api_catalog.v1.SearchSchemasRequest
	34, // 77: idp.api_catalog.v1.APICatalogService.GetSchemaDependencies:input_type -> idp.api_catalog.v1.GetSchemaDependenciesRequest
	14, // 78: idp.api_catalog.v1.APICatalogService.CreateSchema:output_type -> idp.api_catalog.v1.CreateSchemaResponse
	16, // 79: idp.api_catalog.v1.APICatalogService.GetSchema:output_type -> idp.api_catalog.v1.GetSchemaResponse
	18, // 80: idp.api_catalog.v1.APICatalogService.ListSchemas:output_type -> idp.api_catalog.v1.ListSchemasResponse
	20, // 81: idp.api_catalog.v1.APICatalogService.UpdateSchema:output_type -> idp.api_catalog.v1.UpdateSchemaResponse
	22, // 82: idp.api_catalog.v1.APICatalogService.DeleteSchema:output_type -> idp.api_catalog.v1.DeleteSchemaResponse
	24, // 83: idp.api_catalog.v1.APICatalogService.ValidateSchema:output_type -> idp.api_catalog.v1.ValidateSchemaResponse
	27, // 84: idp.api_catalog.v1.APICatalogService.RegisterConsumer:output_type -> idp.api_catalog.v1.RegisterConsumerResponse
	29, // 85: idp.api_catalog.v1.APICatalogService.ListConsumers:output_type -> idp.api_catalog.v1.ListConsumersResponse
	31, // 86: idp.api_catalog.v1.APICatalogService.RemoveConsumer:output_type -> idp.api_catalog.v1.RemoveConsumerResponse
	33, // 87: idp.api_catalog.v1.APICatalogService.SearchSchemas:output_type -> idp.api_catalog.v1.SearchSchemasResponse
	35, // 88: idp.api_catalog.v1.APICatalogService.GetSchemaDependencies:output_type -> idp.api_catalog.v1.GetSchemaDependenciesResponse
	78, // [78:89] is the sub-list for method output_type
	67, // [67:78] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_api_catalog_proto_init() }
func file_api_catalog_proto_init() {
	if File_api_catalog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_catalog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*APISchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*APIEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*APIParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*APIRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*APIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*APIConsumer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CreateSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ListConsumersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ListConsumersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveConsumerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveConsumerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*SearchSchemasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*SearchSchemasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaDependenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetSchemaDependenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_catalog_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*SchemaDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_catalog_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_catalog_proto_goTypes,
		DependencyIndexes: file_api_catalog_proto_depIdxs,
		EnumInfos:         file_api_catalog_proto_enumTypes,
		MessageInfos:      file_api_catalog_proto_msgTypes,
	}.Build()
	File_api_catalog_proto = out.File
	file_api_catalog_proto_rawDesc = nil
	file_api_catalog_proto_goTypes = nil
	file_api_catalog_proto_depIdxs = nil
}
