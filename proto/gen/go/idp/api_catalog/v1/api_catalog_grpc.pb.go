// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: api_catalog.proto

package api_catalogv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	APICatalogService_CreateSchema_FullMethodName          = "/idp.api_catalog.v1.APICatalogService/CreateSchema"
	APICatalogService_GetSchema_FullMethodName             = "/idp.api_catalog.v1.APICatalogService/GetSchema"
	APICatalogService_ListSchemas_FullMethodName           = "/idp.api_catalog.v1.APICatalogService/ListSchemas"
	APICatalogService_UpdateSchema_FullMethodName          = "/idp.api_catalog.v1.APICatalogService/UpdateSchema"
	APICatalogService_DeleteSchema_FullMethodName          = "/idp.api_catalog.v1.APICatalogService/DeleteSchema"
	APICatalogService_ValidateSchema_FullMethodName        = "/idp.api_catalog.v1.APICatalogService/ValidateSchema"
	APICatalogService_RegisterConsumer_FullMethodName      = "/idp.api_catalog.v1.APICatalogService/RegisterConsumer"
	APICatalogService_ListConsumers_FullMethodName         = "/idp.api_catalog.v1.APICatalogService/ListConsumers"
	APICatalogService_RemoveConsumer_FullMethodName        = "/idp.api_catalog.v1.APICatalogService/RemoveConsumer"
	APICatalogService_SearchSchemas_FullMethodName         = "/idp.api_catalog.v1.APICatalogService/SearchSchemas"
	APICatalogService_GetSchemaDependencies_FullMethodName = "/idp.api_catalog.v1.APICatalogService/GetSchemaDependencies"
)

// APICatalogServiceClient is the client API for APICatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API Catalog Service
type APICatalogServiceClient interface {
	// Schema management
	CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error)
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error)
	UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error)
	DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error)
	// Schema validation
	ValidateSchema(ctx context.Context, in *ValidateSchemaRequest, opts ...grpc.CallOption) (*ValidateSchemaResponse, error)
	// Consumer management
	RegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterConsumerResponse, error)
	ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error)
	RemoveConsumer(ctx context.Context, in *RemoveConsumerRequest, opts ...grpc.CallOption) (*RemoveConsumerResponse, error)
	// Discovery
	SearchSchemas(ctx context.Context, in *SearchSchemasRequest, opts ...grpc.CallOption) (*SearchSchemasResponse, error)
	GetSchemaDependencies(ctx context.Context, in *GetSchemaDependenciesRequest, opts ...grpc.CallOption) (*GetSchemaDependenciesResponse, error)
}

type aPICatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPICatalogServiceClient(cc grpc.ClientConnInterface) APICatalogServiceClient {
	return &aPICatalogServiceClient{cc}
}

func (c *aPICatalogServiceClient) CreateSchema(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchemaResponse)
	err := c.cc.Invoke(ctx, APICatalogService_CreateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, APICatalogService_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) ListSchemas(ctx context.Context, in *ListSchemasRequest, opts ...grpc.CallOption) (*ListSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSchemasResponse)
	err := c.cc.Invoke(ctx, APICatalogService_ListSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) UpdateSchema(ctx context.Context, in *UpdateSchemaRequest, opts ...grpc.CallOption) (*UpdateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchemaResponse)
	err := c.cc.Invoke(ctx, APICatalogService_UpdateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) DeleteSchema(ctx context.Context, in *DeleteSchemaRequest, opts ...grpc.CallOption) (*DeleteSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSchemaResponse)
	err := c.cc.Invoke(ctx, APICatalogService_DeleteSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) ValidateSchema(ctx context.Context, in *ValidateSchemaRequest, opts ...grpc.CallOption) (*ValidateSchemaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSchemaResponse)
	err := c.cc.Invoke(ctx, APICatalogService_ValidateSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) RegisterConsumer(ctx context.Context, in *RegisterConsumerRequest, opts ...grpc.CallOption) (*RegisterConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterConsumerResponse)
	err := c.cc.Invoke(ctx, APICatalogService_RegisterConsumer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) ListConsumers(ctx context.Context, in *ListConsumersRequest, opts ...grpc.CallOption) (*ListConsumersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConsumersResponse)
	err := c.cc.Invoke(ctx, APICatalogService_ListConsumers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) RemoveConsumer(ctx context.Context, in *RemoveConsumerRequest, opts ...grpc.CallOption) (*RemoveConsumerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveConsumerResponse)
	err := c.cc.Invoke(ctx, APICatalogService_RemoveConsumer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) SearchSchemas(ctx context.Context, in *SearchSchemasRequest, opts ...grpc.CallOption) (*SearchSchemasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSchemasResponse)
	err := c.cc.Invoke(ctx, APICatalogService_SearchSchemas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPICatalogServiceClient) GetSchemaDependencies(ctx context.Context, in *GetSchemaDependenciesRequest, opts ...grpc.CallOption) (*GetSchemaDependenciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchemaDependenciesResponse)
	err := c.cc.Invoke(ctx, APICatalogService_GetSchemaDependencies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APICatalogServiceServer is the server API for APICatalogService service.
// All implementations must embed UnimplementedAPICatalogServiceServer
// for forward compatibility
//
// API Catalog Service
type APICatalogServiceServer interface {
	// Schema management
	CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error)
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error)
	UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error)
	DeleteSchema(context.Context, *DeleteSchemaRequest) (*DeleteSchemaResponse, error)
	// Schema validation
	ValidateSchema(context.Context, *ValidateSchemaRequest) (*ValidateSchemaResponse, error)
	// Consumer management
	RegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterConsumerResponse, error)
	ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error)
	RemoveConsumer(context.Context, *RemoveConsumerRequest) (*RemoveConsumerResponse, error)
	// Discovery
	SearchSchemas(context.Context, *SearchSchemasRequest) (*SearchSchemasResponse, error)
	GetSchemaDependencies(context.Context, *GetSchemaDependenciesRequest) (*GetSchemaDependenciesResponse, error)
	mustEmbedUnimplementedAPICatalogServiceServer()
}

// UnimplementedAPICatalogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPICatalogServiceServer struct {
}

func (UnimplementedAPICatalogServiceServer) CreateSchema(context.Context, *CreateSchemaRequest) (*CreateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedAPICatalogServiceServer) GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedAPICatalogServiceServer) ListSchemas(context.Context, *ListSchemasRequest) (*ListSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemas not implemented")
}
func (UnimplementedAPICatalogServiceServer) UpdateSchema(context.Context, *UpdateSchemaRequest) (*UpdateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchema not implemented")
}
func (UnimplementedAPICatalogServiceServer) DeleteSchema(context.Context, *DeleteSchemaRequest) (*DeleteSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedAPICatalogServiceServer) ValidateSchema(context.Context, *ValidateSchemaRequest) (*ValidateSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSchema not implemented")
}
func (UnimplementedAPICatalogServiceServer) RegisterConsumer(context.Context, *RegisterConsumerRequest) (*RegisterConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConsumer not implemented")
}
func (UnimplementedAPICatalogServiceServer) ListConsumers(context.Context, *ListConsumersRequest) (*ListConsumersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsumers not implemented")
}
func (UnimplementedAPICatalogServiceServer) RemoveConsumer(context.Context, *RemoveConsumerRequest) (*RemoveConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConsumer not implemented")
}
func (UnimplementedAPICatalogServiceServer) SearchSchemas(context.Context, *SearchSchemasRequest) (*SearchSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSchemas not implemented")
}
func (UnimplementedAPICatalogServiceServer) GetSchemaDependencies(context.Context, *GetSchemaDependenciesRequest) (*GetSchemaDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaDependencies not implemented")
}
func (UnimplementedAPICatalogServiceServer) mustEmbedUnimplementedAPICatalogServiceServer() {}

// UnsafeAPICatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APICatalogServiceServer will
// result in compilation errors.
type UnsafeAPICatalogServiceServer interface {
	mustEmbedUnimplementedAPICatalogServiceServer()
}

func RegisterAPICatalogServiceServer(s grpc.ServiceRegistrar, srv APICatalogServiceServer) {
	s.RegisterService(&APICatalogService_ServiceDesc, srv)
}

func _APICatalogService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_CreateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).CreateSchema(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_ListSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).ListSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_ListSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).ListSchemas(ctx, req.(*ListSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_UpdateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).UpdateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_UpdateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).UpdateSchema(ctx, req.(*UpdateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_DeleteSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).DeleteSchema(ctx, req.(*DeleteSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_ValidateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).ValidateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_ValidateSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).ValidateSchema(ctx, req.(*ValidateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_RegisterConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).RegisterConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_RegisterConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).RegisterConsumer(ctx, req.(*RegisterConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_ListConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConsumersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).ListConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_ListConsumers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).ListConsumers(ctx, req.(*ListConsumersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_RemoveConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConsumerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).RemoveConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_RemoveConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).RemoveConsumer(ctx, req.(*RemoveConsumerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_SearchSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).SearchSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_SearchSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).SearchSchemas(ctx, req.(*SearchSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APICatalogService_GetSchemaDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APICatalogServiceServer).GetSchemaDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APICatalogService_GetSchemaDependencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APICatalogServiceServer).GetSchemaDependencies(ctx, req.(*GetSchemaDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APICatalogService_ServiceDesc is the grpc.ServiceDesc for APICatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APICatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idp.api_catalog.v1.APICatalogService",
	HandlerType: (*APICatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchema",
			Handler:    _APICatalogService_CreateSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _APICatalogService_GetSchema_Handler,
		},
		{
			MethodName: "ListSchemas",
			Handler:    _APICatalogService_ListSchemas_Handler,
		},
		{
			MethodName: "UpdateSchema",
			Handler:    _APICatalogService_UpdateSchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _APICatalogService_DeleteSchema_Handler,
		},
		{
			MethodName: "ValidateSchema",
			Handler:    _APICatalogService_ValidateSchema_Handler,
		},
		{
			MethodName: "RegisterConsumer",
			Handler:    _APICatalogService_RegisterConsumer_Handler,
		},
		{
			MethodName: "ListConsumers",
			Handler:    _APICatalogService_ListConsumers_Handler,
		},
		{
			MethodName: "RemoveConsumer",
			Handler:    _APICatalogService_RemoveConsumer_Handler,
		},
		{
			MethodName: "SearchSchemas",
			Handler:    _APICatalogService_SearchSchemas_Handler,
		},
		{
			MethodName: "GetSchemaDependencies",
			Handler:    _APICatalogService_GetSchemaDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_catalog.proto",
}
