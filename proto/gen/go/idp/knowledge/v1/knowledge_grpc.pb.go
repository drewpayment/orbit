// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: knowledge.proto

package knowledgev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KnowledgeService_CreateKnowledgeSpace_FullMethodName = "/idp.knowledge.v1.KnowledgeService/CreateKnowledgeSpace"
	KnowledgeService_GetKnowledgeSpace_FullMethodName    = "/idp.knowledge.v1.KnowledgeService/GetKnowledgeSpace"
	KnowledgeService_ListKnowledgeSpaces_FullMethodName  = "/idp.knowledge.v1.KnowledgeService/ListKnowledgeSpaces"
	KnowledgeService_UpdateKnowledgeSpace_FullMethodName = "/idp.knowledge.v1.KnowledgeService/UpdateKnowledgeSpace"
	KnowledgeService_DeleteKnowledgeSpace_FullMethodName = "/idp.knowledge.v1.KnowledgeService/DeleteKnowledgeSpace"
	KnowledgeService_CreatePage_FullMethodName           = "/idp.knowledge.v1.KnowledgeService/CreatePage"
	KnowledgeService_GetPage_FullMethodName              = "/idp.knowledge.v1.KnowledgeService/GetPage"
	KnowledgeService_ListPages_FullMethodName            = "/idp.knowledge.v1.KnowledgeService/ListPages"
	KnowledgeService_UpdatePage_FullMethodName           = "/idp.knowledge.v1.KnowledgeService/UpdatePage"
	KnowledgeService_DeletePage_FullMethodName           = "/idp.knowledge.v1.KnowledgeService/DeletePage"
	KnowledgeService_SearchContent_FullMethodName        = "/idp.knowledge.v1.KnowledgeService/SearchContent"
	KnowledgeService_AddComment_FullMethodName           = "/idp.knowledge.v1.KnowledgeService/AddComment"
	KnowledgeService_ListComments_FullMethodName         = "/idp.knowledge.v1.KnowledgeService/ListComments"
	KnowledgeService_UpdateComment_FullMethodName        = "/idp.knowledge.v1.KnowledgeService/UpdateComment"
	KnowledgeService_DeleteComment_FullMethodName        = "/idp.knowledge.v1.KnowledgeService/DeleteComment"
)

// KnowledgeServiceClient is the client API for KnowledgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Knowledge Management Service
type KnowledgeServiceClient interface {
	// Knowledge Space management
	CreateKnowledgeSpace(ctx context.Context, in *CreateKnowledgeSpaceRequest, opts ...grpc.CallOption) (*CreateKnowledgeSpaceResponse, error)
	GetKnowledgeSpace(ctx context.Context, in *GetKnowledgeSpaceRequest, opts ...grpc.CallOption) (*GetKnowledgeSpaceResponse, error)
	ListKnowledgeSpaces(ctx context.Context, in *ListKnowledgeSpacesRequest, opts ...grpc.CallOption) (*ListKnowledgeSpacesResponse, error)
	UpdateKnowledgeSpace(ctx context.Context, in *UpdateKnowledgeSpaceRequest, opts ...grpc.CallOption) (*UpdateKnowledgeSpaceResponse, error)
	DeleteKnowledgeSpace(ctx context.Context, in *DeleteKnowledgeSpaceRequest, opts ...grpc.CallOption) (*DeleteKnowledgeSpaceResponse, error)
	// Page management
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error)
	ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error)
	UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error)
	DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error)
	// Content search
	SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error)
	// Comments
	AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type knowledgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeServiceClient(cc grpc.ClientConnInterface) KnowledgeServiceClient {
	return &knowledgeServiceClient{cc}
}

func (c *knowledgeServiceClient) CreateKnowledgeSpace(ctx context.Context, in *CreateKnowledgeSpaceRequest, opts ...grpc.CallOption) (*CreateKnowledgeSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateKnowledgeSpaceResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_CreateKnowledgeSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetKnowledgeSpace(ctx context.Context, in *GetKnowledgeSpaceRequest, opts ...grpc.CallOption) (*GetKnowledgeSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeSpaceResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetKnowledgeSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) ListKnowledgeSpaces(ctx context.Context, in *ListKnowledgeSpacesRequest, opts ...grpc.CallOption) (*ListKnowledgeSpacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListKnowledgeSpacesResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_ListKnowledgeSpaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) UpdateKnowledgeSpace(ctx context.Context, in *UpdateKnowledgeSpaceRequest, opts ...grpc.CallOption) (*UpdateKnowledgeSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateKnowledgeSpaceResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_UpdateKnowledgeSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) DeleteKnowledgeSpace(ctx context.Context, in *DeleteKnowledgeSpaceRequest, opts ...grpc.CallOption) (*DeleteKnowledgeSpaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteKnowledgeSpaceResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_DeleteKnowledgeSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPageResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_GetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPagesResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_ListPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePageResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_UpdatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePageResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_DeletePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) SearchContent(ctx context.Context, in *SearchContentRequest, opts ...grpc.CallOption) (*SearchContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchContentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_SearchContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*AddCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_AddComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_ListComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_UpdateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, KnowledgeService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServiceServer is the server API for KnowledgeService service.
// All implementations must embed UnimplementedKnowledgeServiceServer
// for forward compatibility
//
// Knowledge Management Service
type KnowledgeServiceServer interface {
	// Knowledge Space management
	CreateKnowledgeSpace(context.Context, *CreateKnowledgeSpaceRequest) (*CreateKnowledgeSpaceResponse, error)
	GetKnowledgeSpace(context.Context, *GetKnowledgeSpaceRequest) (*GetKnowledgeSpaceResponse, error)
	ListKnowledgeSpaces(context.Context, *ListKnowledgeSpacesRequest) (*ListKnowledgeSpacesResponse, error)
	UpdateKnowledgeSpace(context.Context, *UpdateKnowledgeSpaceRequest) (*UpdateKnowledgeSpaceResponse, error)
	DeleteKnowledgeSpace(context.Context, *DeleteKnowledgeSpaceRequest) (*DeleteKnowledgeSpaceResponse, error)
	// Page management
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error)
	ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error)
	UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error)
	DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error)
	// Content search
	SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error)
	// Comments
	AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedKnowledgeServiceServer()
}

// UnimplementedKnowledgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKnowledgeServiceServer struct {
}

func (UnimplementedKnowledgeServiceServer) CreateKnowledgeSpace(context.Context, *CreateKnowledgeSpaceRequest) (*CreateKnowledgeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeSpace not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetKnowledgeSpace(context.Context, *GetKnowledgeSpaceRequest) (*GetKnowledgeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeSpace not implemented")
}
func (UnimplementedKnowledgeServiceServer) ListKnowledgeSpaces(context.Context, *ListKnowledgeSpacesRequest) (*ListKnowledgeSpacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeSpaces not implemented")
}
func (UnimplementedKnowledgeServiceServer) UpdateKnowledgeSpace(context.Context, *UpdateKnowledgeSpaceRequest) (*UpdateKnowledgeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeSpace not implemented")
}
func (UnimplementedKnowledgeServiceServer) DeleteKnowledgeSpace(context.Context, *DeleteKnowledgeSpaceRequest) (*DeleteKnowledgeSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeSpace not implemented")
}
func (UnimplementedKnowledgeServiceServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedKnowledgeServiceServer) GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedKnowledgeServiceServer) ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPages not implemented")
}
func (UnimplementedKnowledgeServiceServer) UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedKnowledgeServiceServer) DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedKnowledgeServiceServer) SearchContent(context.Context, *SearchContentRequest) (*SearchContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContent not implemented")
}
func (UnimplementedKnowledgeServiceServer) AddComment(context.Context, *AddCommentRequest) (*AddCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedKnowledgeServiceServer) ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (UnimplementedKnowledgeServiceServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedKnowledgeServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedKnowledgeServiceServer) mustEmbedUnimplementedKnowledgeServiceServer() {}

// UnsafeKnowledgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeServiceServer will
// result in compilation errors.
type UnsafeKnowledgeServiceServer interface {
	mustEmbedUnimplementedKnowledgeServiceServer()
}

func RegisterKnowledgeServiceServer(s grpc.ServiceRegistrar, srv KnowledgeServiceServer) {
	s.RegisterService(&KnowledgeService_ServiceDesc, srv)
}

func _KnowledgeService_CreateKnowledgeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).CreateKnowledgeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_CreateKnowledgeSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).CreateKnowledgeSpace(ctx, req.(*CreateKnowledgeSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetKnowledgeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetKnowledgeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetKnowledgeSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetKnowledgeSpace(ctx, req.(*GetKnowledgeSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_ListKnowledgeSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).ListKnowledgeSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_ListKnowledgeSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).ListKnowledgeSpaces(ctx, req.(*ListKnowledgeSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_UpdateKnowledgeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKnowledgeSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_UpdateKnowledgeSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).UpdateKnowledgeSpace(ctx, req.(*UpdateKnowledgeSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_DeleteKnowledgeSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKnowledgeSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).DeleteKnowledgeSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_DeleteKnowledgeSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).DeleteKnowledgeSpace(ctx, req.(*DeleteKnowledgeSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_ListPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).ListPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_ListPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).ListPages(ctx, req.(*ListPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).UpdatePage(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).DeletePage(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_SearchContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).SearchContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_SearchContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).SearchContent(ctx, req.(*SearchContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).AddComment(ctx, req.(*AddCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_ListComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeService_ServiceDesc is the grpc.ServiceDesc for KnowledgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idp.knowledge.v1.KnowledgeService",
	HandlerType: (*KnowledgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledgeSpace",
			Handler:    _KnowledgeService_CreateKnowledgeSpace_Handler,
		},
		{
			MethodName: "GetKnowledgeSpace",
			Handler:    _KnowledgeService_GetKnowledgeSpace_Handler,
		},
		{
			MethodName: "ListKnowledgeSpaces",
			Handler:    _KnowledgeService_ListKnowledgeSpaces_Handler,
		},
		{
			MethodName: "UpdateKnowledgeSpace",
			Handler:    _KnowledgeService_UpdateKnowledgeSpace_Handler,
		},
		{
			MethodName: "DeleteKnowledgeSpace",
			Handler:    _KnowledgeService_DeleteKnowledgeSpace_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _KnowledgeService_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _KnowledgeService_GetPage_Handler,
		},
		{
			MethodName: "ListPages",
			Handler:    _KnowledgeService_ListPages_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _KnowledgeService_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _KnowledgeService_DeletePage_Handler,
		},
		{
			MethodName: "SearchContent",
			Handler:    _KnowledgeService_SearchContent_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _KnowledgeService_AddComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _KnowledgeService_ListComments_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _KnowledgeService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _KnowledgeService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knowledge.proto",
}
